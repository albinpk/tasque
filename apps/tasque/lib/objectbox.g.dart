// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'src/features/task/data/local/model/task_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 1345759841069349439),
      name: 'TaskEntity',
      lastPropertyId: const obx_int.IdUid(8, 8553306680066652670),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6164374301938093392),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2331663858544108054),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4049279262871967306),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1802355155798337262),
            name: 'dueDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3952370966141322208),
            name: 'createdAt',
            type: 12,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1264981075713905794),
            name: 'dbPriority',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 683049169092397925),
            name: 'dbStatus',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8553306680066652670),
            name: 'uid',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(1, 8920962430444122018))
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(2, 1345759841069349439),
      lastIndexId: const obx_int.IdUid(1, 8920962430444122018),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [3896928824790545556],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        412847516925081355,
        4612439504896940668,
        3965585545356965815,
        5961896877473299501,
        6268943755397687517,
        2565446762329640936,
        8795640416494452050
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    TaskEntity: obx_int.EntityDefinition<TaskEntity>(
        model: _entities[0],
        toOneRelations: (TaskEntity object) => [],
        toManyRelations: (TaskEntity object) => {},
        getId: (TaskEntity object) => object.id,
        setId: (TaskEntity object, int id) {
          object.id = id;
        },
        objectToFB: (TaskEntity object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final dbPriorityOffset = fbb.writeString(object.dbPriority);
          final dbStatusOffset = fbb.writeString(object.dbStatus);
          final uidOffset = fbb.writeString(object.uid);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addInt64(3, object.dueDate.millisecondsSinceEpoch);
          fbb.addInt64(4, object.createdAt.microsecondsSinceEpoch * 1000);
          fbb.addOffset(5, dbPriorityOffset);
          fbb.addOffset(6, dbStatusOffset);
          fbb.addOffset(7, uidOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final dueDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final createdAtParam = DateTime.fromMicrosecondsSinceEpoch(
              (const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0) /
                      1000)
                  .round());
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final object = TaskEntity(
              uid: uidParam,
              title: titleParam,
              dueDate: dueDateParam,
              createdAt: createdAtParam,
              description: descriptionParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..dbPriority = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 14, '')
            ..dbStatus = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 16, '');

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [TaskEntity] entity fields to define ObjectBox queries.
class TaskEntity_ {
  /// See [TaskEntity.id].
  static final id =
      obx.QueryIntegerProperty<TaskEntity>(_entities[0].properties[0]);

  /// See [TaskEntity.title].
  static final title =
      obx.QueryStringProperty<TaskEntity>(_entities[0].properties[1]);

  /// See [TaskEntity.description].
  static final description =
      obx.QueryStringProperty<TaskEntity>(_entities[0].properties[2]);

  /// See [TaskEntity.dueDate].
  static final dueDate =
      obx.QueryDateProperty<TaskEntity>(_entities[0].properties[3]);

  /// See [TaskEntity.createdAt].
  static final createdAt =
      obx.QueryDateNanoProperty<TaskEntity>(_entities[0].properties[4]);

  /// See [TaskEntity.dbPriority].
  static final dbPriority =
      obx.QueryStringProperty<TaskEntity>(_entities[0].properties[5]);

  /// See [TaskEntity.dbStatus].
  static final dbStatus =
      obx.QueryStringProperty<TaskEntity>(_entities[0].properties[6]);

  /// See [TaskEntity.uid].
  static final uid =
      obx.QueryStringProperty<TaskEntity>(_entities[0].properties[7]);
}
